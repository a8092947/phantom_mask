openapi: 3.0.0
info:
  title: Phantom Mask API
  version: 1.0.0
  description: API for managing pharmacies, masks, users, and transactions.

servers:
  - url: /api
    description: API server

paths:
  /pharmacies:
    get:
      summary: List pharmacies
      parameters:
        - name: time
          in: query
          schema:
            type: string
            format: time
          description: Filter pharmacies open at this time
        - name: day_of_week
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 7
          description: Filter pharmacies open on this day of the week
        - name: min_price
          in: query
          schema:
            type: number
            minimum: 0
          description: Filter pharmacies with masks priced at least this amount
        - name: max_price
          in: query
          schema:
            type: number
            minimum: 0
          description: Filter pharmacies with masks priced at most this amount
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Number of items per page
      responses:
        '200':
          description: A list of pharmacies
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pharmacy'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pharmacies/{id}:
    get:
      summary: Get a pharmacy by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Pharmacy ID
      responses:
        '200':
          description: A pharmacy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/Pharmacy'
        '404':
          description: Pharmacy not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /masks:
    get:
      summary: List masks
      parameters:
        - name: pharmacy_id
          in: query
          schema:
            type: integer
          description: Filter masks by pharmacy ID
        - name: sort_order
          in: query
          schema:
            type: string
            enum: [asc, desc]
          description: Sort order for price
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Number of items per page
      responses:
        '200':
          description: A list of masks
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Mask'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /masks/{id}:
    get:
      summary: Get a mask by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Mask ID
      responses:
        '200':
          description: A mask
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/Mask'
        '404':
          description: Mask not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /masks/search:
    get:
      summary: Search masks
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Search query
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Number of items per page
      responses:
        '200':
          description: A list of masks
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Mask'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    get:
      summary: List users
      parameters:
        - name: sort_order
          in: query
          schema:
            type: string
            enum: [asc, desc]
          description: Sort order for balance
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Number of items per page
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    get:
      summary: Get a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: A user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/top:
    get:
      summary: Get top spenders
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Number of users to return
        - name: start_date
          in: query
          schema:
            type: string
            format: date
          description: Start date for spending calculation
        - name: end_date
          in: query
          schema:
            type: string
            format: date
          description: End date for spending calculation
      responses:
        '200':
          description: A list of top spenders
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/search:
    get:
      summary: Search users
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Search query
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Number of items per page
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transactions:
    get:
      summary: List transactions
      parameters:
        - name: user_id
          in: query
          schema:
            type: integer
          description: Filter transactions by user ID
        - name: start_date
          in: query
          schema:
            type: string
            format: date
          description: Filter transactions after this date
        - name: end_date
          in: query
          schema:
            type: string
            format: date
          description: Filter transactions before this date
        - name: sort_order
          in: query
          schema:
            type: string
            enum: [asc, desc]
          description: Sort order for amount
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Number of items per page
      responses:
        '200':
          description: A list of transactions
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transactions/{id}:
    get:
      summary: Get a transaction by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Transaction ID
      responses:
        '200':
          description: A transaction
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/Transaction'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transactions:
    post:
      summary: Create a transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - pharmacy_id
                - mask_id
                - amount
              properties:
                user_id:
                  type: integer
                  description: User ID
                pharmacy_id:
                  type: integer
                  description: Pharmacy ID
                mask_id:
                  type: integer
                  description: Mask ID
                amount:
                  type: number
                  minimum: 0
                  description: Transaction amount
      responses:
        '201':
          description: Transaction created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 交易建立成功
                  data:
                    $ref: '#/components/schemas/Transaction'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Pharmacy:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        cash_balance:
          type: number
          format: float
        opening_hours:
          type: array
          items:
            $ref: '#/components/schemas/OpeningHour'
        masks:
          type: array
          items:
            $ref: '#/components/schemas/Mask'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    OpeningHour:
      type: object
      properties:
        id:
          type: integer
        pharmacy_id:
          type: integer
        day_of_week:
          type: integer
          minimum: 0
          maximum: 6
        open_time:
          type: string
          format: time
        close_time:
          type: string
          format: time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Mask:
      type: object
      properties:
        id:
          type: integer
        pharmacy_id:
          type: integer
        name:
          type: string
        price:
          type: number
          format: float
        stock:
          type: integer
        pharmacy:
          $ref: '#/components/schemas/Pharmacy'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        cash_balance:
          type: number
          format: float
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Transaction:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        pharmacy_id:
          type: integer
        mask_id:
          type: integer
        amount:
          type: number
          format: float
        quantity:
          type: integer
        transaction_date:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'
        pharmacy:
          $ref: '#/components/schemas/Pharmacy'
        mask:
          $ref: '#/components/schemas/Mask'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string 